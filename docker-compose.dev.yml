version: '3.8'

services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload, excluding node_modules
      - ./frontend/src:/app/src:cached
      - ./frontend/public:/app/public:cached
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/package-lock.json:/app/package-lock.json:ro
      - ./frontend/next.config.js:/app/next.config.js:ro
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/postcss.config.js:/app/postcss.config.js:ro
      - ./frontend/eslint.config.mjs:/app/eslint.config.mjs:ro
      # Let container manage node_modules and .next
      - frontend_node_modules:/app/node_modules
      - /app/.next
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      backend:
        condition: service_healthy

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for hot reload
      - ./backend:/code:cached
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    env_file:
      - ./backend/.env.local
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DB_HOST=postgres
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data/
      # Optional: Mount init scripts
      # - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_dev_data:
  frontend_node_modules: