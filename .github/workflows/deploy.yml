name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: job-platform

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Setup SSH key
      run: |
        # Create SSH key file from GitHub secret
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy-key
        chmod 600 ~/.ssh/deploy-key
        
        # Add the private key to SSH agent
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/deploy-key
        
        echo "‚úÖ SSH key configured from GitHub Secrets"
        
    - name: Wait for SSH connection
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        SSH_KEY="~/.ssh/deploy-key"
        
        echo "Waiting for SSH connection to $EC2_IP..."
        
        attempts=0
        max_attempts=30
        
        while [ $attempts -lt $max_attempts ]; do
          if ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@$EC2_IP 'echo "SSH ready"' &>/dev/null; then
            echo "‚úÖ SSH connection established"
            break
          fi
          
          attempts=$((attempts + 1))
          echo "Attempt $attempts/$max_attempts, waiting 10 seconds..."
          sleep 10
        done
        
        if [ $attempts -eq $max_attempts ]; then
          echo "‚ùå SSH connection failed after $max_attempts attempts"
          exit 1
        fi
        
    - name: Prepare deployment package
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        DB_SECRET_ARN="${{ secrets.DB_SECRET_ARN }}"
        RDS_ENDPOINT="${{ secrets.RDS_ENDPOINT }}"
        
        # Run the preparation script
        chmod +x .github/scripts/prepare-deployment.sh
        .github/scripts/prepare-deployment.sh "$EC2_IP" "$DB_SECRET_ARN" "$RDS_ENDPOINT"
        
    - name: Upload and deploy to EC2
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        SSH_KEY="~/.ssh/deploy-key"
        
        echo "üì§ Uploading to EC2..."
        scp -i "$SSH_KEY" -o StrictHostKeyChecking=no deploy.tar.gz ubuntu@$EC2_IP:/tmp/
        
        echo "üì§ Uploading deployment script..."
        scp -i "$SSH_KEY" -o StrictHostKeyChecking=no .github/scripts/deploy-app.sh ubuntu@$EC2_IP:/tmp/
        
        echo "üöÄ Running deployment on EC2..."
        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'chmod +x /tmp/deploy-app.sh && /tmp/deploy-app.sh'
        
        # Clean up local files
        rm -f deploy.tar.gz
        
        echo "‚úÖ Application deployed successfully"
        
    - name: Test deployment
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        
        echo "üß™ Testing deployment..."
        
        sleep 10
        
        # Test frontend
        echo "Testing frontend..."
        if curl -s -o /dev/null -w "%{http_code}" "http://$EC2_IP:3000/" | grep -q "200"; then
          echo "‚úÖ Frontend is accessible"
        else
          echo "‚ö†Ô∏è Frontend test failed"
        fi
        
        # Test backend
        echo "Testing backend..."
        if curl -s "http://$EC2_IP:8000/health" | grep -q "healthy" 2>/dev/null; then
          echo "‚úÖ Backend is healthy"
        else
          echo "‚ö†Ô∏è Backend health check failed"
        fi
        
    - name: Deployment summary
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        
        echo ""
        echo "üéâ Application deployment completed successfully!"
        echo ""
        echo "üåê Application URLs (via Nginx reverse proxy):"
        echo "  Frontend:    http://pom100.com"
        echo "  Frontend:    http://www.pom100.com"
        echo "  Backend API: http://api.pom100.com"
        echo "  API Docs:    http://api.pom100.com/docs"
        echo ""
        echo "üîß Direct Access (for debugging):"
        echo "  Frontend:  http://$EC2_IP:3000"
        echo "  Backend:   http://$EC2_IP:8000"
        echo ""
        echo "üê≥ Container Management:"
        echo "  docker compose -f docker-compose.prod.yml ps"
        echo "  docker compose -f docker-compose.prod.yml logs frontend"
        echo "  docker compose -f docker-compose.prod.yml logs backend"
        echo ""
        echo "‚ö†Ô∏è Clear your browser cache to see frontend changes!"