name: Deploy Simple

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: job-platform

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install required tools
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Setup SSH key
      run: |
        # Create SSH key file from GitHub secret
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy-key
        chmod 600 ~/.ssh/deploy-key
        
        # Add the private key to SSH agent
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/deploy-key
        
        echo "‚úÖ SSH key configured from GitHub Secrets"
        
    - name: Wait for SSH connection
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        SSH_KEY="~/.ssh/deploy-key"
        
        echo "Waiting for SSH connection to $EC2_IP..."
        
        attempts=0
        max_attempts=30
        
        while [ $attempts -lt $max_attempts ]; do
          if ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@$EC2_IP 'echo "SSH ready"' &>/dev/null; then
            echo "‚úÖ SSH connection established"
            break
          fi
          
          attempts=$((attempts + 1))
          echo "Attempt $attempts/$max_attempts, waiting 10 seconds..."
          sleep 10
        done
        
        if [ $attempts -eq $max_attempts ]; then
          echo "‚ùå SSH connection failed after $max_attempts attempts"
          exit 1
        fi
        
    - name: Deploy application
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        SSH_KEY="~/.ssh/deploy-key"
        DB_SECRET_ARN="${{ secrets.DB_SECRET_ARN }}"
        RDS_ENDPOINT="${{ secrets.RDS_ENDPOINT }}"
        
        echo "Deploying application to $EC2_IP..."
        
        # Update frontend config for production
        echo "Updating frontend config for production..."
        
        # Backup original config
        cp frontend/public/config.js frontend/public/config.js.backup
        
        # Create production config
        cat > frontend/public/config.js << 'CONFIG_EOF'
// Production configuration - automatically generated during deployment
window.APP_CONFIG = {
  API_URL: 'https://api.pom100.com',
  ENVIRONMENT: 'production'
};
CONFIG_EOF
        
        # Create production environment file for backend
        echo "Creating production environment file..."
        cat > .env << 'ENV_EOF'
# Production environment variables - automatically generated during deployment
# Database credentials are retrieved from AWS Secrets Manager on the EC2 instance
DB_HOST=$RDS_ENDPOINT
DB_PORT=5432
DB_NAME=jobplatform  
DB_SECRET_ARN=$DB_SECRET_ARN
ENVIRONMENT=production
DEBUG=false
NEXT_PUBLIC_API_URL=https://api.pom100.com
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000,http://pom100.com,http://www.pom100.com,https://pom100.com,https://www.pom100.com
ENV_EOF
        
        # Create deployment package
        echo "Creating deployment package..."
        tar --exclude='.git' --exclude='node_modules' --exclude='.next' --exclude='frontend/test-results' --exclude='frontend/tests' --exclude='__pycache__' --exclude='.env.local' \
            -czf deploy.tar.gz frontend/ backend/ docker-compose.prod.yml .env
        
        # Restore original config and clean up temporary files
        mv frontend/public/config.js.backup frontend/public/config.js
        rm -f .env
        
        # Upload to EC2
        echo "Uploading to EC2..."
        scp -i "$SSH_KEY" -o StrictHostKeyChecking=no deploy.tar.gz ubuntu@$EC2_IP:/tmp/
        
        # Upload and execute deployment script
        scp -i "$SSH_KEY" -o StrictHostKeyChecking=no .github/scripts/deploy-app.sh ubuntu@$EC2_IP:/tmp/
        ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'chmod +x /tmp/deploy-app.sh && /tmp/deploy-app.sh'
        
        # Clean up local files
        rm -f deploy.tar.gz
        
        echo "‚úÖ Application deployed successfully"
        
    - name: Test deployment
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        
        echo "Testing deployment..."
        
        sleep 10
        
        # Test frontend
        echo "Testing frontend..."
        if curl -s -o /dev/null -w "%{http_code}" "http://$EC2_IP:3000/" | grep -q "200"; then
          echo "‚úÖ Frontend is accessible"
        else
          echo "‚ö†Ô∏è Frontend test failed"
        fi
        
        # Test backend
        echo "Testing backend..."
        if curl -s "http://$EC2_IP:8000/health" | grep -q "healthy" 2>/dev/null; then
          echo "‚úÖ Backend is healthy"
        else
          echo "‚ö†Ô∏è Backend health check failed"
        fi
        
    - name: Deployment summary
      run: |
        EC2_IP="${{ secrets.EC2_IP }}"
        
        echo ""
        echo "ÔøΩÔøΩ Application deployment completed successfully!"
        echo ""
        echo "üåê Application URLs (via Nginx reverse proxy):"
        echo "  Frontend:    http://pom100.com"
        echo "  Frontend:    http://www.pom100.com"
        echo "  Backend API: http://api.pom100.com"
        echo "  API Docs:    http://api.pom100.com/docs"
        echo ""
        echo "üîß Direct Access (for debugging):"
        echo "  Frontend:  http://$EC2_IP:3000"
        echo "  Backend:   http://$EC2_IP:8000"
        echo ""
        echo "üê≥ Container Management:"
        echo "  docker compose -f docker-compose.prod.yml ps"
        echo "  docker compose -f docker-compose.prod.yml logs frontend"
        echo "  docker compose -f docker-compose.prod.yml logs backend"
        echo ""
        echo "‚ö†Ô∏è Clear your browser cache to see frontend changes!"
